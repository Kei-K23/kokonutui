{
  "name": "ai-input-05",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { CornerRightUp } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\n\ninterface TypewriterState {\n    text: string;\n    index: number;\n    isComplete: boolean;\n}\n\nconst INITIAL_TEXT = \"What can i do for you?\";\nconst SPEED = 30;\nconst RESET_DELAY = 1000;\nconst MIN_HEIGHT = 56;\n\nexport default function AIInput_05() {\n    const [inputValue, setInputValue] = useState(\"\");\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n        minHeight: MIN_HEIGHT,\n        maxHeight: 200,\n    });\n    const [typewriter, setTypewriter] = useState<TypewriterState>({\n        text: \"\",\n        index: 0,\n        isComplete: false,\n    });\n\n    useEffect(() => {\n        if (typewriter.index < INITIAL_TEXT.length) {\n            const timer = setTimeout(() => {\n                setTypewriter((prev) => ({\n                    text: prev.text + INITIAL_TEXT[prev.index],\n                    index: prev.index + 1,\n                    isComplete: false,\n                }));\n            }, SPEED);\n            return () => clearTimeout(timer);\n        }\n\n        const resetTimer = setTimeout(() => {\n            setTypewriter({ text: \"\", index: 0, isComplete: false });\n        }, RESET_DELAY);\n\n        setTypewriter((prev) => ({ ...prev, isComplete: true }));\n        return () => clearTimeout(resetTimer);\n    }, [typewriter.index]);\n\n    const handleSubmit = () => {\n        setInputValue(\"\");\n        adjustHeight(true);\n    };\n\n    return (\n        <div className=\"w-full py-4\">\n            <div className=\"text-2xl p-4 bg-background min-h-[100px] flex items-center justify-center\">\n                <p className=\"text-black dark:text-white font-semibold\">\n                    {typewriter.text}\n                    {!typewriter.isComplete && (\n                        <span className=\"animate-blink\">|</span>\n                    )}\n                </p>\n            </div>\n\n            <div className=\"relative max-w-xl w-full mx-auto\">\n                <Textarea\n                    id=\"ai-input-05\"\n                    placeholder=\"Ask me anything!\"\n                    className=\"max-w-xl bg-black/5 dark:bg-white/5 w-full rounded-3xl pl-4 pr-12 placeholder:text-black/70 dark:placeholder:text-white/70 border-none text-black dark:text-white resize-none text-wrap min-h-[40px] py-4\"\n                    ref={textareaRef}\n                    value={inputValue}\n                    onKeyDown={(e) => {\n                        if (e.key === \"Enter\" && !e.shiftKey) {\n                            e.preventDefault();\n                            handleSubmit();\n                        }\n                    }}\n                    onChange={(e) => {\n                        setInputValue(e.target.value);\n                        adjustHeight();\n                    }}\n                />\n                <button\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 py-1 px-1\"\n                    type=\"button\"\n                    onClick={handleSubmit}\n                >\n                    <CornerRightUp\n                        className={cn(\n                            \"w-4 h-4 transition-opacity dark:text-white\",\n                            {\n                                \"opacity-100\": inputValue,\n                                \"opacity-30\": !inputValue,\n                            }\n                        )}\n                    />\n                </button>\n            </div>\n        </div>\n    );\n}\n",
      "path": "/components/ai-input/ai-input-05.tsx",
      "target": "components/ai-input/ai-input-05.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, useRef, useCallback } from \"react\";\n\ninterface UseAutoResizeTextareaProps {\n    minHeight: number;\n    maxHeight?: number;\n}\n\nexport function useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n}: UseAutoResizeTextareaProps) {\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const adjustHeight = useCallback(\n        (reset?: boolean) => {\n            const textarea = textareaRef.current;\n            if (!textarea) return;\n\n            if (reset) {\n                textarea.style.height = `${minHeight}px`;\n                return;\n            }\n\n            // Temporarily shrink to get the right scrollHeight\n            textarea.style.height = `${minHeight}px`;\n\n            // Calculate new height\n            const newHeight = Math.max(\n                minHeight,\n                Math.min(\n                    textarea.scrollHeight,\n                    maxHeight ?? Number.POSITIVE_INFINITY\n                )\n            );\n\n            textarea.style.height = `${newHeight}px`;\n        },\n        [minHeight, maxHeight]\n    );\n\n    useEffect(() => {\n        // Set initial height\n        const textarea = textareaRef.current;\n        if (textarea) {\n            textarea.style.height = `${minHeight}px`;\n        }\n    }, [minHeight]);\n\n    // Adjust height on window resize\n    useEffect(() => {\n        const handleResize = () => adjustHeight();\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, [adjustHeight]);\n\n    return { textareaRef, adjustHeight };\n}\n",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "hooks/use-auto-resize-textarea.ts"
    }
  ]
}